{"version":3,"sources":["onset.ts","redux/reducer.ts","redux/store.ts","Speed/Speedometer.tsx","Decompte/DecompteValue.tsx","Counter/Counter.tsx","CheckPoints/CheckpointPassed.tsx","Win/Win.tsx","Position/Position.tsx","App.tsx","index.tsx"],"names":["wrapAction","fn","store","dispatch","notifySpeed","createAction","notifyDecompte","notifyTime","notifyPosition","playerFinished","passCheckpoint","hideCheckpoint","clearFinishTime","window","NotifySpeed","NotifyDecompte","NotifyTime","PlayerFinished","PlayerPassedCheckpoint","HideCheckPoint","ClearFinishTime","NotifyPosition","counterReducer","createReducer","speed","decompte","time","total","position","checkpointInfos","all","type","state","action","Math","abs","Number","parseFloat","payload","parseInt","win","undefined","data","JSON","parse","pos","last","nb","visible","id","place","configureStore","reducer","Speedometer","playerSpeed","useSelector","appState","rotationFromSpeed","console","log","className","style","transform","Decompte","decompteValue","format","n","Counter","counterValue","seconds","minutes","floor","secondsLeft","msLeft","CheckpointPassed","checkpointData","Win","winData","Position","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["import {store} from \"./redux/store\";\r\nimport { AnyAction } from \"@reduxjs/toolkit\";\r\n\r\n/**\r\n * You should not edit this file this is the function to dispatch actions to the store\r\n * outside of a react component\r\n */\r\ntype ForeignAction = (...args: any[]) => AnyAction;\r\nexport const wrapAction = (fn: ForeignAction) => (...args: any[]) => store.dispatch(fn(...args));\r\n","import { createAction, AnyAction, createReducer } from \"@reduxjs/toolkit\";\r\nimport { wrapAction } from \"../onset\";\r\n\r\n// Here I create an action that takes no argument\r\nexport const notifySpeed = createAction(\"NOTIFY_SPEED\");\r\nexport const notifyDecompte = createAction(\"NOTIFY_DECOMPTE\");\r\nexport const notifyTime = createAction(\"NOTIFY_TIME\");\r\nexport const notifyPosition = createAction(\"NOTIFY_POSITION\");\r\nexport const playerFinished = createAction(\"PLAYER_FINISHED\");\r\nexport const passCheckpoint = createAction(\"PASS_CHECKPOINT\");\r\nexport const hideCheckpoint = createAction(\"HIDE_CHECKPOINT\");\r\nexport const clearFinishTime  = createAction(\"CLEAR_FINISH_TIME\");\r\n\r\n// I want this action to be available to Onset so I attach it globally\r\n(window as any).NotifySpeed = wrapAction(notifySpeed);\r\n(window as any).NotifyDecompte = wrapAction(notifyDecompte);\r\n(window as any).NotifyTime = wrapAction(notifyTime);\r\n(window as any).PlayerFinished = wrapAction(playerFinished);\r\n(window as any).PlayerPassedCheckpoint = wrapAction(passCheckpoint);\r\n(window as any).HideCheckPoint = wrapAction(hideCheckpoint);\r\n(window as any).ClearFinishTime = wrapAction(clearFinishTime);\r\n(window as any).NotifyPosition = wrapAction(notifyPosition);\r\n\r\n// Here I declare the state of my whole application\r\n// I only have one of course because this is only counting\r\nexport interface IAppState {\r\n    speed: number;\r\n    decompte: number;\r\n    time: number;\r\n    total: number;\r\n    position: number;\r\n    checkpointInfos: {\r\n        last?: number;\r\n        time?: number;\r\n        visible?: boolean;\r\n        all: {\r\n            id: number;\r\n            time: number;\r\n        }[]\r\n    },\r\n    win?: {\r\n        time: number;\r\n        pos: number;\r\n    }\r\n}\r\n\r\nconst initialState: IAppState = {\r\n    speed: 0,\r\n    decompte: -1,\r\n    time: 0,\r\n    total: 0,\r\n    position: 0,\r\n    checkpointInfos: {\r\n        all: []\r\n    }\r\n};\r\n\r\n// Here it is my reducer, his tasks is to merge the future state with\r\nexport const counterReducer = createReducer(initialState, {\r\n    [notifySpeed.type]: (state, action) => ({ ...state, \r\n        speed: Math.abs(Number.parseFloat(action.payload)),\r\n    }),\r\n    [notifyDecompte.type]: (state, action) => ({ ...state,\r\n        decompte: Number.parseInt(action.payload),\r\n        win: undefined\r\n    }),\r\n    [notifyTime.type]: (state, action) => ({ ...state,\r\n        time: Number.parseInt(action.payload)\r\n    }),\r\n    [notifyPosition.type]: (state, action) => {\r\n        const data = JSON.parse(action.payload);\r\n        return {...state,\r\n            position: data.pos,\r\n            total: data.total\r\n        }\r\n    },\r\n    [passCheckpoint.type]: (state, action) => {\r\n        const data = JSON.parse(action.payload);\r\n        return {...state,\r\n            checkpointInfos: {\r\n                last: data.nb,\r\n                time: state.time,\r\n                visible: true,\r\n                all: [...state.checkpointInfos.all, {\r\n                    id: data.nb,\r\n                    time: state.time\r\n                }]\r\n            },\r\n        }\r\n    },\r\n    [hideCheckpoint.type]: (state) => ({...state,\r\n        checkpointInfos: {\r\n            ...state.checkpointInfos,\r\n            visible: false\r\n        }\r\n    }),\r\n    [playerFinished.type]: (state, action) => {\r\n        const data = JSON.parse(action.payload);\r\n\r\n        return {...state,\r\n            speed: 0,\r\n            decompte: -1,\r\n            time: 0,\r\n            win: {\r\n                time: data.time,\r\n                pos: data.place\r\n            },\r\n            checkpointInfos: {\r\n                all: []\r\n            }\r\n        }\r\n    },\r\n    [clearFinishTime.type]: (state) => ({...state,\r\n        win: undefined,\r\n    })\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { counterReducer } from \"./reducer\";\r\n\r\nexport const store = configureStore({ reducer: counterReducer });\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IAppState } from \"../redux/reducer\";\r\nimport \"./speedometer.css\"\r\n\r\nexport const Speedometer = () => {\r\n\r\n    const playerSpeed = useSelector((appState: IAppState) => appState.speed);\r\n    const rotationFromSpeed = playerSpeed <= 20\r\n        ? -140\r\n        : -140 + (playerSpeed - 20);\r\n\r\n    console.log(\"Player Speed : \", playerSpeed);\r\n\r\n    return (\r\n        <div className=\"gauge\">\r\n            <div className=\"needle\" style={{transform: `rotate(${rotationFromSpeed}deg)`}}>\r\n                <div className=\"needleBody\"></div>\r\n            </div>\r\n            <div className=\"textSpeed\">\r\n                {playerSpeed}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IAppState } from \"../redux/reducer\";\r\nimport \"./decompte.css\"\r\n\r\nexport const Decompte = () => {\r\n    const decompteValue = useSelector((appState: IAppState) => appState.decompte);\r\n\r\n    return decompteValue !== -1 ? <div className=\"decompte\">\r\n        ({decompteValue})\r\n    </div> : null;\r\n}\r\n","import React from \"react\";\r\nimport { IAppState } from \"../redux/reducer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./counter.css\"\r\n\r\nconst format = (n: number): String => n < 10 ? `0${n}` : `${n}`;\r\n\r\nexport const Counter = () => {\r\n    const counterValue = useSelector((appState: IAppState) => appState.time)\r\n\r\n    console.log(\"Time : \", counterValue);\r\n\r\n    const seconds = counterValue / 1000;\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secondsLeft = Math.floor(seconds % 60);\r\n    const msLeft = counterValue % 1000;\r\n\r\n    return counterValue !== 0 \r\n    ?   <div className=\"counterContainer\">\r\n            <div className=\"counterBox\">\r\n                {format(minutes)}:{format(secondsLeft)}:{msLeft}\r\n            </div>\r\n        </div>\r\n    : null;\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IAppState } from \"../redux/reducer\";\r\nimport \"./checkpoints.css\"\r\n\r\nexport const CheckpointPassed = () => {\r\n    const checkpointData = useSelector((appState: IAppState) => appState.checkpointInfos);\r\n\r\n    console.log(\"Checkpoints data : \", checkpointData);\r\n    const counterValue = checkpointData.time;\r\n    if (counterValue && checkpointData.visible) {\r\n        const seconds = counterValue / 1000;\r\n        const minutes = Math.floor(seconds / 60);\r\n        const secondsLeft = Math.floor(seconds % 60);\r\n        const msLeft = counterValue % 1000;\r\n            \r\n        return <div className=\"checkpointPassed\">\r\n            Checkpoint #{checkpointData.last} {minutes}:{secondsLeft}\r\n        </div>;\r\n    }\r\n    return null;\r\n}\r\n","import React from \"react\";\r\nimport { IAppState } from \"../redux/reducer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./win.css\";\r\n\r\nexport const Win = () => {\r\n    \r\n    const winData = useSelector((appState: IAppState) => appState.win)\r\n\r\n    console.log(\"Win Data : \", winData);\r\n\r\n    return winData ? <div className=\"winDisplay\">\r\n        ( FINISHED {winData.pos} )\r\n    </div> : null;\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IAppState } from \"../redux/reducer\";\r\nimport \"./position.css\"\r\n\r\nexport const Position = () => {\r\n\r\n    const {pos, total} = useSelector((appState: IAppState) => ({pos: appState.position, total: appState.total}));\r\n    \r\n    return <div className=\"position\">\r\n        {pos} / {total}\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./redux/store\";\r\nimport { Speedometer } from './Speed/Speedometer';\r\nimport { Decompte } from './Decompte/DecompteValue';\r\nimport { Counter } from './Counter/Counter';\r\nimport { CheckpointPassed } from './CheckPoints/CheckpointPassed';\r\nimport { Win } from './Win/Win';\r\nimport {Position} from \"./Position/Position\"\r\n\r\n// This is the main part of the application that will run as soon as the cef is ready and javascript loaded\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <Counter />\r\n      <CheckpointPassed />\r\n      <Decompte />\r\n      <Speedometer />\r\n      <Position />\r\n      <Win />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport \"./onset\";\r\nimport \"./css/bulma.css\"\r\nimport \"./css/overrides.css\"\r\n\r\n// This is the react bootstrapping file, nothing interesting here :)\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}